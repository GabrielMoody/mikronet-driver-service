// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.3
// source: driver.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Driver struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email         string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber   *string                `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	Sim           *string                `protobuf:"bytes,5,opt,name=sim,proto3,oneof" json:"sim,omitempty"`
	LicenseNumber *string                `protobuf:"bytes,6,opt,name=license_number,json=licenseNumber,proto3,oneof" json:"license_number,omitempty"`
	Route         *string                `protobuf:"bytes,7,opt,name=route,proto3,oneof" json:"route,omitempty"`
	Verified      *bool                  `protobuf:"varint,8,opt,name=verified,proto3,oneof" json:"verified,omitempty"`
	ImageUrl      *string                `protobuf:"bytes,9,opt,name=image_url,json=imageUrl,proto3,oneof" json:"image_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Driver) Reset() {
	*x = Driver{}
	mi := &file_driver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Driver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Driver) ProtoMessage() {}

func (x *Driver) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Driver.ProtoReflect.Descriptor instead.
func (*Driver) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{0}
}

func (x *Driver) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Driver) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Driver) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Driver) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *Driver) GetSim() string {
	if x != nil && x.Sim != nil {
		return *x.Sim
	}
	return ""
}

func (x *Driver) GetLicenseNumber() string {
	if x != nil && x.LicenseNumber != nil {
		return *x.LicenseNumber
	}
	return ""
}

func (x *Driver) GetRoute() string {
	if x != nil && x.Route != nil {
		return *x.Route
	}
	return ""
}

func (x *Driver) GetVerified() bool {
	if x != nil && x.Verified != nil {
		return *x.Verified
	}
	return false
}

func (x *Driver) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

type CreateDriverRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email          string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber    string                 `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	LicenseNumber  string                 `protobuf:"bytes,4,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`
	Sim            string                 `protobuf:"bytes,5,opt,name=sim,proto3" json:"sim,omitempty"`
	ProfilePicture []byte                 `protobuf:"bytes,6,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	Id             string                 `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateDriverRequest) Reset() {
	*x = CreateDriverRequest{}
	mi := &file_driver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDriverRequest) ProtoMessage() {}

func (x *CreateDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDriverRequest.ProtoReflect.Descriptor instead.
func (*CreateDriverRequest) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDriverRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDriverRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateDriverRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *CreateDriverRequest) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *CreateDriverRequest) GetSim() string {
	if x != nil {
		return x.Sim
	}
	return ""
}

func (x *CreateDriverRequest) GetProfilePicture() []byte {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *CreateDriverRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReqDrivers struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Verified:
	//
	//	*ReqDrivers_IsVerified
	//	*ReqDrivers_NotVerified
	Verified      isReqDrivers_Verified `protobuf_oneof:"verified"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReqDrivers) Reset() {
	*x = ReqDrivers{}
	mi := &file_driver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReqDrivers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDrivers) ProtoMessage() {}

func (x *ReqDrivers) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDrivers.ProtoReflect.Descriptor instead.
func (*ReqDrivers) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{2}
}

func (x *ReqDrivers) GetVerified() isReqDrivers_Verified {
	if x != nil {
		return x.Verified
	}
	return nil
}

func (x *ReqDrivers) GetIsVerified() bool {
	if x != nil {
		if x, ok := x.Verified.(*ReqDrivers_IsVerified); ok {
			return x.IsVerified
		}
	}
	return false
}

func (x *ReqDrivers) GetNotVerified() bool {
	if x != nil {
		if x, ok := x.Verified.(*ReqDrivers_NotVerified); ok {
			return x.NotVerified
		}
	}
	return false
}

type isReqDrivers_Verified interface {
	isReqDrivers_Verified()
}

type ReqDrivers_IsVerified struct {
	IsVerified bool `protobuf:"varint,1,opt,name=is_verified,json=isVerified,proto3,oneof"`
}

type ReqDrivers_NotVerified struct {
	NotVerified bool `protobuf:"varint,2,opt,name=not_verified,json=notVerified,proto3,oneof"`
}

func (*ReqDrivers_IsVerified) isReqDrivers_Verified() {}

func (*ReqDrivers_NotVerified) isReqDrivers_Verified() {}

type ReqByID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReqByID) Reset() {
	*x = ReqByID{}
	mi := &file_driver_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReqByID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqByID) ProtoMessage() {}

func (x *ReqByID) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqByID.ProtoReflect.Descriptor instead.
func (*ReqByID) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{3}
}

func (x *ReqByID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Drivers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Drivers       []*Driver              `protobuf:"bytes,1,rep,name=drivers,proto3" json:"drivers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Drivers) Reset() {
	*x = Drivers{}
	mi := &file_driver_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Drivers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Drivers) ProtoMessage() {}

func (x *Drivers) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Drivers.ProtoReflect.Descriptor instead.
func (*Drivers) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{4}
}

func (x *Drivers) GetDrivers() []*Driver {
	if x != nil {
		return x.Drivers
	}
	return nil
}

var File_driver_proto protoreflect.FileDescriptor

var file_driver_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0xdc, 0x02, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x69, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x03, 0x73, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x69, 0x6d, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x69, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x0a,
	0x52, 0x65, 0x71, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x19,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x42, 0x79, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x07, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x32, 0xa5,
	0x02, 0x0a, 0x0d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x1b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x12, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x1a, 0x0f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x0e, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x0e, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x00, 0x12, 0x36,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x0f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x42, 0x79, 0x49, 0x44, 0x1a, 0x0e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x22, 0x00, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x61, 0x62, 0x72, 0x69, 0x65, 0x6c, 0x4d, 0x6f, 0x6f, 0x64,
	0x79, 0x2f, 0x4d, 0x69, 0x6b, 0x72, 0x6f, 0x4e, 0x65, 0x74, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_driver_proto_rawDescOnce sync.Once
	file_driver_proto_rawDescData []byte
)

func file_driver_proto_rawDescGZIP() []byte {
	file_driver_proto_rawDescOnce.Do(func() {
		file_driver_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_driver_proto_rawDesc), len(file_driver_proto_rawDesc)))
	})
	return file_driver_proto_rawDescData
}

var file_driver_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_driver_proto_goTypes = []any{
	(*Driver)(nil),              // 0: driver.Driver
	(*CreateDriverRequest)(nil), // 1: driver.CreateDriverRequest
	(*ReqDrivers)(nil),          // 2: driver.ReqDrivers
	(*ReqByID)(nil),             // 3: driver.ReqByID
	(*Drivers)(nil),             // 4: driver.Drivers
}
var file_driver_proto_depIdxs = []int32{
	0, // 0: driver.Drivers.drivers:type_name -> driver.Driver
	1, // 1: driver.DriverService.CreateDriver:input_type -> driver.CreateDriverRequest
	2, // 2: driver.DriverService.GetDrivers:input_type -> driver.ReqDrivers
	3, // 3: driver.DriverService.GetDriverDetails:input_type -> driver.ReqByID
	3, // 4: driver.DriverService.DeleteDriver:input_type -> driver.ReqByID
	3, // 5: driver.DriverService.SetStatusVerified:input_type -> driver.ReqByID
	0, // 6: driver.DriverService.CreateDriver:output_type -> driver.Driver
	4, // 7: driver.DriverService.GetDrivers:output_type -> driver.Drivers
	0, // 8: driver.DriverService.GetDriverDetails:output_type -> driver.Driver
	0, // 9: driver.DriverService.DeleteDriver:output_type -> driver.Driver
	0, // 10: driver.DriverService.SetStatusVerified:output_type -> driver.Driver
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_driver_proto_init() }
func file_driver_proto_init() {
	if File_driver_proto != nil {
		return
	}
	file_driver_proto_msgTypes[0].OneofWrappers = []any{}
	file_driver_proto_msgTypes[2].OneofWrappers = []any{
		(*ReqDrivers_IsVerified)(nil),
		(*ReqDrivers_NotVerified)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_driver_proto_rawDesc), len(file_driver_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_driver_proto_goTypes,
		DependencyIndexes: file_driver_proto_depIdxs,
		MessageInfos:      file_driver_proto_msgTypes,
	}.Build()
	File_driver_proto = out.File
	file_driver_proto_goTypes = nil
	file_driver_proto_depIdxs = nil
}
